"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3763],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}},9742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"usage/troubleshooting","title":"Troubleshooting","description":"This is a place to share common problems and solutions to them.","source":"@site/../docs/usage/Troubleshooting.md","sourceDirName":"usage","slug":"/usage/troubleshooting","permalink":"/usage/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/reduxjs/redux/edit/master/website/../docs/usage/Troubleshooting.md","tags":[],"version":"current","lastUpdatedAt":1747212223000,"frontMatter":{"id":"troubleshooting","title":"Troubleshooting"},"sidebar":"docs","previous":{"title":"Writing Tests","permalink":"/usage/writing-tests"},"next":{"title":"Structuring Reducers","permalink":"/usage/structuring-reducers/structuring-reducers"}}');var s=n(4848),r=n(8453);const a={id:"troubleshooting",title:"Troubleshooting"},i="Troubleshooting",d={},c=[{value:"Nothing happens when I dispatch an action",id:"nothing-happens-when-i-dispatch-an-action",level:3},{value:"Never mutate reducer arguments",id:"never-mutate-reducer-arguments",level:4},{value:"Don&#39;t forget to call <code>dispatch(action)</code>",id:"dont-forget-to-call-dispatchaction",level:4},{value:"<code>TodoActions.js</code>",id:"todoactionsjs",level:4},{value:"<code>AddTodo.js</code>",id:"addtodojs",level:4},{value:"<code>AddTodo.js</code>",id:"addtodojs-1",level:4},{value:"Make sure mapStateToProps is correct",id:"make-sure-mapstatetoprops-is-correct",level:4},{value:"Something else doesn&#39;t work",id:"something-else-doesnt-work",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,s.jsx)(t.p,{children:"This is a place to share common problems and solutions to them.\nThe examples use React, but you should still find them useful if you use something else."}),"\n",(0,s.jsx)(t.h3,{id:"nothing-happens-when-i-dispatch-an-action",children:"Nothing happens when I dispatch an action"}),"\n",(0,s.jsx)(t.p,{children:"Sometimes, you are trying to dispatch an action, but your view does not update. Why does this happen? There may be several reasons for this."}),"\n",(0,s.jsx)(t.h4,{id:"never-mutate-reducer-arguments",children:"Never mutate reducer arguments"}),"\n",(0,s.jsxs)(t.p,{children:["It is tempting to modify the ",(0,s.jsx)(t.code,{children:"state"})," or ",(0,s.jsx)(t.code,{children:"action"})," passed to you by Redux. Don't do this!"]}),"\n",(0,s.jsxs)(t.p,{children:["Redux assumes that you never mutate the objects it gives to you in the reducer. ",(0,s.jsx)(t.strong,{children:"Every single time, you must return the new state object."})," Even if you don't use a library like ",(0,s.jsx)(t.a,{href:"https://github.com/immerjs/immer",children:"Immer"}),", you need to completely avoid mutation."]}),"\n",(0,s.jsxs)(t.p,{children:["Immutability is what lets ",(0,s.jsx)(t.a,{href:"https://github.com/gaearon/react-redux",children:"react-redux"})," efficiently subscribe to fine-grained updates of your state. It also enables great developer experience features such as time travel with ",(0,s.jsx)(t.a,{href:"https://github.com/reduxjs/redux-devtools",children:"redux-devtools"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"For example, a reducer like this is wrong because it mutates the state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      // Wrong! This mutates state\n      state.push({\n        text: action.text,\n        completed: false\n      })\n      return state\n    case 'COMPLETE_TODO':\n      // Wrong! This mutates state[action.index].\n      state[action.index].completed = true\n      return state\n    default:\n      return state\n  }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"It needs to be rewritten like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      // Return a new array\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'COMPLETE_TODO':\n      // Return a new array\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          // Copy the object before mutating\n          return Object.assign({}, todo, {\n            completed: true\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It's more code, but it's exactly what makes Redux predictable and efficient. If you want to have less code, you can use a helper like ",(0,s.jsx)(t.a,{href:"https://facebook.github.io/react/docs/update.html",children:(0,s.jsx)(t.code,{children:"React.addons.update"})})," to write immutable transformations with a terse syntax:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// Before:\nreturn state.map((todo, index) => {\n  if (index === action.index) {\n    return Object.assign({}, todo, {\n      completed: true\n    })\n  }\n  return todo\n})\n\n// After\nreturn update(state, {\n  [action.index]: {\n    completed: {\n      $set: true\n    }\n  }\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Finally, to update objects, you'll need something like ",(0,s.jsx)(t.code,{children:"_.extend"})," from Underscore, or better, an ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",children:(0,s.jsx)(t.code,{children:"Object.assign"})})," polyfill."]}),"\n",(0,s.jsxs)(t.p,{children:["Make sure that you use ",(0,s.jsx)(t.code,{children:"Object.assign"})," correctly. For example, instead of returning something like ",(0,s.jsx)(t.code,{children:"Object.assign(state, newData)"})," from your reducers, return ",(0,s.jsx)(t.code,{children:"Object.assign({}, state, newData)"}),". This way you don't override the previous ",(0,s.jsx)(t.code,{children:"state"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"You can also use the object spread operator proposal for a more succinct syntax:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// Before:\nreturn state.map((todo, index) => {\n  if (index === action.index) {\n    return Object.assign({}, todo, {\n      completed: true\n    })\n  }\n  return todo\n})\n\n// After:\nreturn state.map((todo, index) => {\n  if (index === action.index) {\n    return { ...todo, completed: true }\n  }\n  return todo\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"Note that experimental language features are subject to change."}),"\n",(0,s.jsxs)(t.p,{children:["Also keep an eye out for nested state objects that need to be deeply copied. Both ",(0,s.jsx)(t.code,{children:"_.extend"})," and ",(0,s.jsx)(t.code,{children:"Object.assign"})," make a shallow copy of the state. See ",(0,s.jsx)(t.a,{href:"/usage/structuring-reducers/immutable-update-patterns#updating-nested-objects",children:"Updating Nested Objects"})," for suggestions on how to deal with nested state objects."]}),"\n",(0,s.jsxs)(t.h4,{id:"dont-forget-to-call-dispatchaction",children:["Don't forget to call ",(0,s.jsx)(t.a,{href:"/api/store#dispatchaction",children:(0,s.jsx)(t.code,{children:"dispatch(action)"})})]}),"\n",(0,s.jsxs)(t.p,{children:["If you define an action creator, calling it will ",(0,s.jsx)(t.em,{children:"not"})," automatically dispatch the action. For example, this code will do nothing:"]}),"\n",(0,s.jsx)(t.h4,{id:"todoactionsjs",children:(0,s.jsx)(t.code,{children:"TodoActions.js"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"export function addTodo(text) {\n  return { type: 'ADD_TODO', text }\n}\n"})}),"\n",(0,s.jsx)(t.h4,{id:"addtodojs",children:(0,s.jsx)(t.code,{children:"AddTodo.js"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import React, { Component } from 'react'\nimport { addTodo } from './TodoActions'\n\nclass AddTodo extends Component {\n  handleClick() {\n    // Won't work!\n    addTodo('Fix the issue')\n  }\n\n  render() {\n    return <button onClick={() => this.handleClick()}>Add</button>\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It doesn't work because your action creator is just a function that ",(0,s.jsx)(t.em,{children:"returns"})," an action. It is up to you to actually dispatch it. We can't bind your action creators to a particular Store instance during the definition because apps that render on the server need a separate Redux store for every request."]}),"\n",(0,s.jsxs)(t.p,{children:["The fix is to call ",(0,s.jsx)(t.a,{href:"/api/store#dispatchaction",children:(0,s.jsx)(t.code,{children:"dispatch()"})})," method on the ",(0,s.jsx)(t.a,{href:"/api/store",children:"store"})," instance:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"handleClick() {\n  // Works! (but you need to grab store somehow)\n  store.dispatch(addTodo('Fix the issue'))\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you're somewhere deep in the component hierarchy, it is cumbersome to pass the store down manually. This is why ",(0,s.jsx)(t.a,{href:"https://github.com/gaearon/react-redux",children:"react-redux"})," lets you use a ",(0,s.jsx)(t.code,{children:"connect"})," ",(0,s.jsx)(t.a,{href:"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750",children:"higher-order component"})," that will, apart from subscribing you to a Redux store, inject ",(0,s.jsx)(t.code,{children:"dispatch"})," into your component's props."]}),"\n",(0,s.jsx)(t.p,{children:"The fixed code looks like this:"}),"\n",(0,s.jsx)(t.h4,{id:"addtodojs-1",children:(0,s.jsx)(t.code,{children:"AddTodo.js"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from './TodoActions'\n\nclass AddTodo extends Component {\n  handleClick() {\n    // Works!\n    this.props.dispatch(addTodo('Fix the issue'))\n  }\n\n  render() {\n    return <button onClick={() => this.handleClick()}>Add</button>\n  }\n}\n\n// In addition to the state, `connect` puts `dispatch` in our props.\nexport default connect()(AddTodo)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can then pass ",(0,s.jsx)(t.code,{children:"dispatch"})," down to other components manually, if you want to."]}),"\n",(0,s.jsx)(t.h4,{id:"make-sure-mapstatetoprops-is-correct",children:"Make sure mapStateToProps is correct"}),"\n",(0,s.jsx)(t.p,{children:"It's possible you're correctly dispatching an action and applying your reducer but the corresponding state is not being correctly translated into props."}),"\n",(0,s.jsx)(t.h2,{id:"something-else-doesnt-work",children:"Something else doesn't work"}),"\n",(0,s.jsxs)(t.p,{children:["Ask around on the ",(0,s.jsx)(t.strong,{children:"#redux"})," ",(0,s.jsx)(t.a,{href:"https://www.reactiflux.com/",children:"Reactiflux"})," Discord channel, or ",(0,s.jsx)(t.a,{href:"https://github.com/reduxjs/redux/issues",children:"create an issue"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["If you figure it out, ",(0,s.jsx)(t.a,{href:"https://github.com/reduxjs/redux/edit/master/docs/usage/Troubleshooting.md",children:"edit this document"})," as a courtesy to the next person having the same problem."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);