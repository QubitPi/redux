"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1025],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(n),h=s,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:s,o[1]=r;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5778:function(e,t,n){n.d(t,{s:function(){return s}});var a=n(7294),s=function(e){var t=e.children,n=e.title,s=void 0===n?"Detailed Explanation":n;return a.createElement("details",{className:"detailed-explanation"},a.createElement("summary",null,a.createElement("h4",null,s)),t)}},5138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),s=n(3366),i=(n(7294),n(3905)),o=n(5778),r=["components"],l={id:"part-5-async-logic",title:"Redux Essentials, Part 5: Async Logic and Data Fetching",sidebar_label:"Async Logic and Data Fetching",description:"The official Redux Essentials tutorial: learn how async logic works in Redux apps"},d=void 0,c={unversionedId:"tutorials/essentials/part-5-async-logic",id:"tutorials/essentials/part-5-async-logic",title:"Redux Essentials, Part 5: Async Logic and Data Fetching",description:"The official Redux Essentials tutorial: learn how async logic works in Redux apps",source:"@site/../docs/tutorials/essentials/part-5-async-logic.md",sourceDirName:"tutorials/essentials",slug:"/tutorials/essentials/part-5-async-logic",permalink:"/redux/tutorials/essentials/part-5-async-logic",draft:!1,editUrl:"https://github.com/reduxjs/redux/edit/master/website/../docs/tutorials/essentials/part-5-async-logic.md",tags:[],version:"current",lastUpdatedAt:1694577230,formattedLastUpdatedAt:"Sep 13, 2023",frontMatter:{id:"part-5-async-logic",title:"Redux Essentials, Part 5: Async Logic and Data Fetching",sidebar_label:"Async Logic and Data Fetching",description:"The official Redux Essentials tutorial: learn how async logic works in Redux apps"},sidebar:"docs",previous:{title:"Using Redux Data",permalink:"/redux/tutorials/essentials/part-4-using-data"},next:{title:"Performance and Normalizing Data",permalink:"/redux/tutorials/essentials/part-6-performance-normalization"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Example REST API and Client",id:"example-rest-api-and-client",level:3},{value:"Thunks and Async Logic",id:"thunks-and-async-logic",level:2},{value:"Using Middleware to Enable Async Logic",id:"using-middleware-to-enable-async-logic",level:3},{value:"Thunk Functions",id:"thunk-functions",level:3},{value:"Writing Async Thunks",id:"writing-async-thunks",level:3},{value:"Loading Posts",id:"loading-posts",level:2},{value:"Extracting Posts Selectors",id:"extracting-posts-selectors",level:3},{value:"Loading State for Requests",id:"loading-state-for-requests",level:3},{value:"Fetching Data with <code>createAsyncThunk</code>",id:"fetching-data-with-createasyncthunk",level:3},{value:"Dispatching Thunks from Components",id:"dispatching-thunks-from-components",level:4},{value:"Reducers and Loading Actions",id:"reducers-and-loading-actions",level:3},{value:"Displaying Loading State",id:"displaying-loading-state",level:3},{value:"Loading Users",id:"loading-users",level:2},{value:"Adding New Posts",id:"adding-new-posts",level:2},{value:"Sending Data with Thunks",id:"sending-data-with-thunks",level:3},{value:"Checking Thunk Results in Components",id:"checking-thunk-results-in-components",level:3},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}],h={toc:u},m="wrapper";function k(e){var t=e.components,l=(0,s.Z)(e,r);return(0,i.kt)(m,(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"What You'll Learn",type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},'How to use the Redux "thunk" middleware for async logic'),(0,i.kt)("li",{parentName:"ul"},"Patterns for handling async request state"),(0,i.kt)("li",{parentName:"ul"},"How to use the Redux Toolkit ",(0,i.kt)("inlineCode",{parentName:"li"},"createAsyncThunk")," API to simplify async calls"))),(0,i.kt)("admonition",{title:"Prerequisites",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Familiarity with using AJAX requests to fetch and update data from a server"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"/redux/tutorials/essentials/part-4-using-data"},"Part 4: Using Redux Data"),", we saw how to use multiple pieces of data from the Redux store inside of React components, customize the contents of action objects before they're dispatched, and handle more complex update logic in our reducers."),(0,i.kt)("p",null,"So far, all the data we've worked with has been directly inside of our React client application. However, most real applications need to work with data from a server, by making HTTP API calls to fetch and save items."),(0,i.kt)("p",null,"In this section, we'll convert our social media app to fetch the posts and users data from an API, and add new posts by saving them to the API."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Redux Toolkit includes the ",(0,i.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/rtk-query/overview"},(0,i.kt)("strong",{parentName:"a"},"RTK Query data fetching and caching API")),". RTK Query is a purpose built data fetching and caching solution for Redux apps, and ",(0,i.kt)("strong",{parentName:"p"},"can eliminate the need to write ",(0,i.kt)("em",{parentName:"strong"},"any")," thunks or reducers to manage data fetching"),". We specifically teach RTK Query as the default approach for data fetching, and RTK Query is built on the same patterns shown in this page."),(0,i.kt)("p",{parentName:"admonition"},"We'll cover how to use RTK Query starting in ",(0,i.kt)("a",{parentName:"p",href:"/redux/tutorials/essentials/part-7-rtk-query-basics"},"Part 7: RTK Query Basics"),".")),(0,i.kt)("h3",{id:"example-rest-api-and-client"},"Example REST API and Client"),(0,i.kt)("p",null,"To keep the example project isolated but realistic, the initial project setup already includes a fake in-memory REST API for our data (configured using ",(0,i.kt)("a",{parentName:"p",href:"https://mswjs.io/"},"the Mock Service Worker mock API tool"),"). The API uses ",(0,i.kt)("inlineCode",{parentName:"p"},"/fakeApi")," as the base URL for the endpoints, and supports the typical ",(0,i.kt)("inlineCode",{parentName:"p"},"GET/POST/PUT/DELETE")," HTTP methods for ",(0,i.kt)("inlineCode",{parentName:"p"},"/fakeApi/posts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/fakeApi/users"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"fakeApi/notifications"),". It's defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/api/server.js"),"."),(0,i.kt)("p",null,"The project also includes a small HTTP API client object that exposes ",(0,i.kt)("inlineCode",{parentName:"p"},"client.get()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client.post()")," methods, similar to popular HTTP libraries like ",(0,i.kt)("inlineCode",{parentName:"p"},"axios"),". It's defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/api/client.js"),"."),(0,i.kt)("p",null,"We'll use the ",(0,i.kt)("inlineCode",{parentName:"p"},"client")," object to make HTTP calls to our in-memory fake REST API for this section."),(0,i.kt)("p",null,"Also, the mock server has been set up to reuse the same random seed each time the page is loaded, so that it will generate the same list of fake users and fake posts. If you want to reset that, delete the ",(0,i.kt)("inlineCode",{parentName:"p"},"'randomTimestampSeed'")," value in your browser's Local Storage and reload the page, or you can turn that off by editing ",(0,i.kt)("inlineCode",{parentName:"p"},"src/api/server.js")," and setting ",(0,i.kt)("inlineCode",{parentName:"p"},"useSeededRNG")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"As a reminder, the code examples focus on the key concepts and changes for each section. See the CodeSandbox projects and the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-essentials-example-app/tree/tutorial-steps"},(0,i.kt)("inlineCode",{parentName:"a"},"tutorial-steps")," branch in the project repo")," for the complete changes in the application.")),(0,i.kt)("h2",{id:"thunks-and-async-logic"},"Thunks and Async Logic"),(0,i.kt)("h3",{id:"using-middleware-to-enable-async-logic"},"Using Middleware to Enable Async Logic"),(0,i.kt)("p",null,"By itself, a Redux store doesn't know anything about async logic. It only knows how to synchronously dispatch actions, update the state by calling the root reducer function, and notify the UI that something has changed. Any asynchronicity has to happen outside the store."),(0,i.kt)("p",null,"But, what if you want to have async logic interact with the store by dispatching or checking the current store state? That's where ",(0,i.kt)("a",{parentName:"p",href:"/redux/tutorials/fundamentals/part-4-store#middleware"},"Redux middleware")," come in. They extend the store, and allow you to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Execute extra logic when any action is dispatched (such as logging the action and state)"),(0,i.kt)("li",{parentName:"ul"},"Pause, modify, delay, replace, or halt dispatched actions"),(0,i.kt)("li",{parentName:"ul"},"Write extra code that has access to ",(0,i.kt)("inlineCode",{parentName:"li"},"dispatch")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"getState")),(0,i.kt)("li",{parentName:"ul"},"Teach ",(0,i.kt)("inlineCode",{parentName:"li"},"dispatch")," how to accept other values besides plain action objects, such as functions and promises, by intercepting them and dispatching real action objects instead")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/redux/faq/actions#how-can-i-represent-side-effects-such-as-ajax-calls-why-do-we-need-things-like-action-creators-thunks-and-middleware-to-do-async-behavior"},"The most common reason to use middleware is to allow different kinds of async logic to interact with the store"),". This allows you to write code that can dispatch actions and check the store state, while keeping that logic separate from your UI."),(0,i.kt)("p",null,"There are many kinds of async middleware for Redux, and each lets you write your logic using different syntax. The most common async middleware is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-thunk"},(0,i.kt)("inlineCode",{parentName:"a"},"redux-thunk")),", which lets you write plain functions that may contain async logic directly. Redux Toolkit's ",(0,i.kt)("inlineCode",{parentName:"p"},"configureStore")," function ",(0,i.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/api/getDefaultMiddleware#included-default-middleware"},"automatically sets up the thunk middleware by default"),", and ",(0,i.kt)("a",{parentName:"p",href:"/redux/style-guide/#use-thunks-and-listeners-for-other-async-logic"},"we recommend using thunks as a standard approach for writing async logic with Redux"),"."),(0,i.kt)("p",null,"Earlier, we saw ",(0,i.kt)("a",{parentName:"p",href:"/redux/tutorials/essentials/part-1-overview-concepts#redux-application-data-flow"},"what the synchronous data flow for Redux looks like"),". When we introduce asynchronous logic, we add an extra step where middleware can run logic like AJAX requests, then dispatch actions. That makes the async data flow look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Redux async data flow diagram",src:n(9929).Z,width:"1440",height:"1080"})),(0,i.kt)("h3",{id:"thunk-functions"},"Thunk Functions"),(0,i.kt)("p",null,"Once the thunk middleware has been added to the Redux store, it allows you to pass ",(0,i.kt)("em",{parentName:"p"},"thunk functions")," directly to ",(0,i.kt)("inlineCode",{parentName:"p"},"store.dispatch"),". A thunk function will always be called with ",(0,i.kt)("inlineCode",{parentName:"p"},"(dispatch, getState)")," as its arguments, and you can use them inside the thunk as needed."),(0,i.kt)("p",null,"Thunks typically dispatch plain actions using action creators, like ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch(increment())"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const store = configureStore({ reducer: counterReducer })\n\nconst exampleThunkFunction = (dispatch, getState) => {\n  const stateBefore = getState()\n  console.log(`Counter before: ${stateBefore.counter}`)\n  dispatch(increment())\n  const stateAfter = getState()\n  console.log(`Counter after: ${stateAfter.counter}`)\n}\n\nstore.dispatch(exampleThunkFunction)\n")),(0,i.kt)("p",null,"For consistency with dispatching normal action objects, we typically write these as ",(0,i.kt)("em",{parentName:"p"},"thunk action creators"),", which return the thunk function. These action creators can take arguments that can be used inside the thunk."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const logAndAdd = amount => {\n  return (dispatch, getState) => {\n    const stateBefore = getState()\n    console.log(`Counter before: ${stateBefore.counter}`)\n    dispatch(incrementByAmount(amount))\n    const stateAfter = getState()\n    console.log(`Counter after: ${stateAfter.counter}`)\n  }\n}\n\nstore.dispatch(logAndAdd(5))\n")),(0,i.kt)("p",null,'Thunks are typically written in "slice" files. ',(0,i.kt)("inlineCode",{parentName:"p"},"createSlice")," itself does not have any special support for defining thunks, so you should write them as separate functions in the same slice file. That way, they have access to the plain action creators for that slice, and it's easy to find where the thunk lives."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},'The word "thunk" is a programming term that means ',(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Thunk"},'"a piece of code that does some delayed work"'),". For more details on how to use thunks, see the thunk usage guide page:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/redux/usage/writing-logic-thunks"},"Using Redux: Writing Logic with Thunks"))),(0,i.kt)("p",{parentName:"admonition"},"as well as these posts:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://daveceddia.com/what-is-a-thunk/"},"What the heck is a thunk?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/fullstack-academy/thunks-in-redux-the-basics-85e538a3fe60"},"Thunks in Redux: the basics")))),(0,i.kt)("h3",{id:"writing-async-thunks"},"Writing Async Thunks"),(0,i.kt)("p",null,"Thunks may have async logic inside of them, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"setTimeout"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"s, and ",(0,i.kt)("inlineCode",{parentName:"p"},"async/await"),". This makes them a good place to put AJAX calls to a server API."),(0,i.kt)("p",null,"Data fetching logic for Redux typically follows a predictable pattern:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'A "start" action is dispatched before the request, to indicate that the request is in progress. This may be used to track loading state to allow skipping duplicate requests or show loading indicators in the UI.'),(0,i.kt)("li",{parentName:"ul"},"The async request is made"),(0,i.kt)("li",{parentName:"ul"},'Depending on the request result, the async logic dispatches either a "success" action containing the result data, or a "failure" action containing error details. The reducer logic clears the loading state in both cases, and either processes the result data from the success case, or stores the error value for potential display.')),(0,i.kt)("p",null,"These steps are not ",(0,i.kt)("em",{parentName:"p"},"required"),', but are commonly used. (If all you care about is a successful result, you can just dispatch a single "success" action when the request finishes, and skip the "start" and "failure" actions.)'),(0,i.kt)("p",null,"Redux Toolkit provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," API to implement the creation and dispatching of these actions, and we'll look at how to use it shortly."),(0,i.kt)(o.s,{title:"Detailed Explanation: Dispatching Request Status Actions in Thunks",mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"If we were to write out the code for a typical async thunk by hand, it might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const getRepoDetailsStarted = () => ({\n  type: 'repoDetails/fetchStarted'\n})\nconst getRepoDetailsSuccess = repoDetails => ({\n  type: 'repoDetails/fetchSucceeded',\n  payload: repoDetails\n})\nconst getRepoDetailsFailed = error => ({\n  type: 'repoDetails/fetchFailed',\n  error\n})\nconst fetchIssuesCount = (org, repo) => async dispatch => {\n  dispatch(getRepoDetailsStarted())\n  try {\n    const repoDetails = await getRepoDetails(org, repo)\n    dispatch(getRepoDetailsSuccess(repoDetails))\n  } catch (err) {\n    dispatch(getRepoDetailsFailed(err.toString()))\n  }\n}\n")),(0,i.kt)("p",null,"However, writing code using this approach is tedious. Each separate type of request needs repeated similar implementation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unique action types need to be defined for the three different cases"),(0,i.kt)("li",{parentName:"ul"},"Each of those action types usually has a corresponding action creator function"),(0,i.kt)("li",{parentName:"ul"},"A thunk has to be written that dispatches the correct actions in the right sequence")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," abstracts this pattern by generating the action types and action creators, and generating a thunk that dispatches those actions automatically. You provide a callback function that makes the async call and returns a Promise with the result.")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"loading-posts"},"Loading Posts"),(0,i.kt)("p",null,"So far, our ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," has used some hardcoded sample data as its initial state. We're going to switch that to start with an empty array of posts instead, and then fetch a list of posts from the server."),(0,i.kt)("p",null,"In order to do that, we're going to have to change the structure of the state in our ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice"),", so that we can keep track of the current state of the API request."),(0,i.kt)("h3",{id:"extracting-posts-selectors"},"Extracting Posts Selectors"),(0,i.kt)("p",null,"Right now, the ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," state is a single array of ",(0,i.kt)("inlineCode",{parentName:"p"},"posts"),". We need to change that to be an object that has the ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," array, plus the loading state fields."),(0,i.kt)("p",null,"Meanwhile, the UI components like ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," are trying to read posts from ",(0,i.kt)("inlineCode",{parentName:"p"},"state.posts")," in their ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector")," hooks, assuming that field is an array. We need to change those locations also to match the new data."),(0,i.kt)("p",null,"It would be nice if we didn't have to keep rewriting our components every time we made a change to the data format in our reducers. One way to avoid this is to define reusable selector functions in the slice files, and have the components use those selectors to extract the data they need instead of repeating the selector logic in each component. That way, if we do change our state structure again, we only need to update the code in the slice file."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," component needs to read a list of all the posts, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"<SinglePostPage>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<EditPostForm>")," components need to look up a single post by its ID. Let's export two small selector functions from ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice.js")," to cover those cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/postsSlice.js"',title:'"features/posts/postsSlice.js"'},"const postsSlice = createSlice(/* omit slice code*/)\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\n// highlight-start\nexport const selectAllPosts = state => state.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.find(post => post.id === postId)\n//highlight-end\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," parameter for these selector functions is the root Redux state object, as it was for the inlined anonymous selectors we wrote directly inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector"),"."),(0,i.kt)("p",null,"We can then use them in the components:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/PostsList.js"',title:'"features/posts/PostsList.js"'},"// omit imports\n// highlight-next-line\nimport { selectAllPosts } from './postsSlice'\n\nexport const PostsList = () => {\n  // highlight-next-line\n  const posts = useSelector(selectAllPosts)\n  // omit component contents\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/SinglePostPage.js"',title:'"features/posts/SinglePostPage.js"'},"// omit imports\n//highlight-next-line\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params\n\n  // highlight-next-line\n  const post = useSelector(state => selectPostById(state, postId))\n  // omit component logic\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/EditPostForm.js"',title:'"features/posts/EditPostForm.js"'},"// omit imports\n//highlight-next-line\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params\n\n  // highlight-next-line\n  const post = useSelector(state => selectPostById(state, postId))\n  // omit component logic\n}\n")),(0,i.kt)("p",null,"It's often a good idea to encapsulate data lookups by writing reusable selectors. You can also create \"memoized\" selectors that can help improve performance, which we'll look at in a later part of this tutorial."),(0,i.kt)("p",null,"But, like any abstraction, it's not something you should do ",(0,i.kt)("em",{parentName:"p"},"all")," the time, everywhere. Writing selectors means more code to understand and maintain. ",(0,i.kt)("strong",{parentName:"p"},"Don't feel like you need to write selectors for every single field of your state"),". Try starting without any selectors, and add some later when you find yourself looking up the same values in many parts of your application code."),(0,i.kt)("h3",{id:"loading-state-for-requests"},"Loading State for Requests"),(0,i.kt)("p",null,"When we make an API call, we can view its progress as a small state machine that can be in one of four possible states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The request hasn't started yet"),(0,i.kt)("li",{parentName:"ul"},"The request is in progress"),(0,i.kt)("li",{parentName:"ul"},"The request succeeded, and we now have the data we need"),(0,i.kt)("li",{parentName:"ul"},"The request failed, and there's probably an error message")),(0,i.kt)("p",null,"We ",(0,i.kt)("em",{parentName:"p"},"could")," track that information using some booleans, like ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading: true"),", but it's better to track these states as a single enum value. A good pattern for this is to have a state section that looks like this (using TypeScript type notation):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  // Multiple possible status enum values\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  error: string | null\n}\n")),(0,i.kt)("p",null,"These fields would exist alongside whatever actual data is being stored. These specific string state names aren't required - feel free to use other names if you want, like ",(0,i.kt)("inlineCode",{parentName:"p"},"'pending'")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"'loading'"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"'complete'")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"'succeeded'"),"."),(0,i.kt)("p",null,"We can use this information to decide what to show in our UI as the request progresses, and also add logic in our reducers to prevent cases like loading data twice."),(0,i.kt)("p",null,"Let's update our ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice"),' to use this pattern to track loading state for a "fetch posts" request. We\'ll switch our state from being an array of posts by itself, to look like ',(0,i.kt)("inlineCode",{parentName:"p"},"{posts, status, error}"),". We'll also remove the old sample post entries from our initial state. As part of this change, we also need to change any uses of ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," as an array to be ",(0,i.kt)("inlineCode",{parentName:"p"},"state.posts")," instead, because the array is now one level deeper:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/postsSlice.js"',title:'"features/posts/postsSlice.js"'},"import { createSlice, nanoid } from '@reduxjs/toolkit'\n\n// highlight-start\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n//highlight-end\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        // highlight-next-line\n        state.posts.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        // omit prepare logic\n      }\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      // highlight-next-line\n      const existingPost = state.posts.find(post => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      // highlight-next-line\n      const existingPost = state.posts.find(post => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    }\n  }\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\n// highlight-start\nexport const selectAllPosts = state => state.posts.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find(post => post.id === postId)\n// highlight-end\n")),(0,i.kt)("p",null,"Yes, this ",(0,i.kt)("em",{parentName:"p"},"does")," mean that we now have a nested object path that looks like ",(0,i.kt)("inlineCode",{parentName:"p"},"state.posts.posts"),", which is somewhat repetitive and silly :) We ",(0,i.kt)("em",{parentName:"p"},"could")," change the nested array name to be ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," or something if we wanted to avoid that, but we'll leave it as-is for now."),(0,i.kt)("h3",{id:"fetching-data-with-createasyncthunk"},"Fetching Data with ",(0,i.kt)("inlineCode",{parentName:"h3"},"createAsyncThunk")),(0,i.kt)("p",null,"Redux Toolkit's ",(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk"),' API generates thunks that automatically dispatch those "start/success/failure" actions for you.'),(0,i.kt)("p",null,"Let's start by adding a thunk that will make an AJAX call to retrieve a list of posts. We'll import the ",(0,i.kt)("inlineCode",{parentName:"p"},"client")," utility from the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/api")," folder, and use that to make a request to ",(0,i.kt)("inlineCode",{parentName:"p"},"'/fakeApi/posts'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/postsSlice"',title:'"features/posts/postsSlice"'},"// highlight-next-line\nimport { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\n// highlight-next-line\nimport { client } from '../../api/client'\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n\n// highlight-start\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n// highlight-end\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," accepts two arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A string that will be used as the prefix for the generated action types"),(0,i.kt)("li",{parentName:"ul"},'A "payload creator" callback function that should return a ',(0,i.kt)("inlineCode",{parentName:"li"},"Promise")," containing some data, or a rejected ",(0,i.kt)("inlineCode",{parentName:"li"},"Promise")," with an error")),(0,i.kt)("p",null,"The payload creator will usually make an AJAX call of some kind, and can either return the ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," from the AJAX call directly, or extract some data from the API response and return that. We typically write this using the JS ",(0,i.kt)("inlineCode",{parentName:"p"},"async/await")," syntax, which lets us write functions that use ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"s while using standard ",(0,i.kt)("inlineCode",{parentName:"p"},"try/catch")," logic instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"somePromise.then()")," chains."),(0,i.kt)("p",null,"In this case, we pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"'posts/fetchPosts'")," as the action type prefix. Our payload creation callback waits for the API call to return a response. The response object looks like ",(0,i.kt)("inlineCode",{parentName:"p"},"{data: []}"),", and we want our dispatched Redux action to have a payload that is ",(0,i.kt)("em",{parentName:"p"},"just")," the array of posts. So, we extract ",(0,i.kt)("inlineCode",{parentName:"p"},"response.data"),", and return that from the callback."),(0,i.kt)("p",null,"If we try calling ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch(fetchPosts())"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchPosts")," thunk will first dispatch an action type of ",(0,i.kt)("inlineCode",{parentName:"p"},"'posts/fetchPosts/pending'"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"`createAsyncThunk`: posts pending action",src:n(9501).Z,width:"1641",height:"307"})),(0,i.kt)("p",null,"We can listen for this action in our reducer and mark the request status as ",(0,i.kt)("inlineCode",{parentName:"p"},"'loading'"),"."),(0,i.kt)("p",null,"Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," resolves, the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchPosts")," thunk takes the ",(0,i.kt)("inlineCode",{parentName:"p"},"response.data")," array we returned from the callback, and dispatches a ",(0,i.kt)("inlineCode",{parentName:"p"},"'posts/fetchPosts/fulfilled'")," action containing the posts array as ",(0,i.kt)("inlineCode",{parentName:"p"},"action.payload"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"`createAsyncThunk`: posts pending action",src:n(9244).Z,width:"1641",height:"623"})),(0,i.kt)("h4",{id:"dispatching-thunks-from-components"},"Dispatching Thunks from Components"),(0,i.kt)("p",null,"So, let's update our ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," component to actually fetch this data automatically for us."),(0,i.kt)("p",null,"We'll import the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchPosts")," thunk into the component. Like all of our other action creators, we have to dispatch it, so we'll also need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDispatch")," hook. Since we want to fetch this data when ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," mounts, we need to import the React ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/PostsList.js"',title:'"features/posts/PostsList.js"'},"// highlight-start\nimport React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n// omit other imports\n// highlight-end\n//highlight-next-line\nimport { selectAllPosts, fetchPosts } from './postsSlice'\n\nexport const PostsList = () => {\n  // highlight-next-line\n  const dispatch = useDispatch()\n  const posts = useSelector(selectAllPosts)\n\n  // highlight-start\n  const postStatus = useSelector(state => state.posts.status)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n  // highlight-end\n\n  // omit rendering logic\n}\n")),(0,i.kt)("p",null,"It's important that we only try to fetch the list of posts once. If we do it every time the ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," component renders, or is re-created because we've switched between views, we might end up fetching the posts several times. We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"posts.status")," enum to help decide if we need to actually start fetching, by selecting that into the component and only starting the fetch if the status is ",(0,i.kt)("inlineCode",{parentName:"p"},"'idle'"),"."),(0,i.kt)("h3",{id:"reducers-and-loading-actions"},"Reducers and Loading Actions"),(0,i.kt)("p",null,"Next up, we need to handle both these actions in our reducers. This requires a bit deeper look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"createSlice")," API we've been using."),(0,i.kt)("p",null,"We've already seen that ",(0,i.kt)("inlineCode",{parentName:"p"},"createSlice")," will generate an action creator for every reducer function we define in the ",(0,i.kt)("inlineCode",{parentName:"p"},"reducers")," field, and that the generated action types include the name of the slice, like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"console.log(\n  postUpdated({ id: '123', title: 'First Post', content: 'Some text here' })\n)\n/*\n{\n  type: 'posts/postUpdated',\n  payload: {\n    id: '123',\n    title: 'First Post',\n    content: 'Some text here'\n  }\n}\n*/\n")),(0,i.kt)("p",null,"However, there are times when a slice reducer needs to respond to ",(0,i.kt)("em",{parentName:"p"},"other")," actions that weren't defined as part of this slice's ",(0,i.kt)("inlineCode",{parentName:"p"},"reducers")," field. We can do that using the slice ",(0,i.kt)("inlineCode",{parentName:"p"},"extraReducers")," field instead."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"extraReducers")," option should be a function that receives a parameter called ",(0,i.kt)("inlineCode",{parentName:"p"},"builder"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"builder")," object provides methods that let us define additional case reducers that will run in response to actions defined outside of the slice. We'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"builder.addCase(actionCreator, reducer)")," to handle each of the actions dispatched by our async thunks."),(0,i.kt)(o.s,{title:"Detailed Explanation: Adding Extra Reducers to Slices",mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"builder")," object in ",(0,i.kt)("inlineCode",{parentName:"p"},"extraReducers")," provides methods that let us define additional case reducers that will run in response to actions defined outside of the slice:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"builder.addCase(actionCreator, reducer)"),": defines a case reducer that handles a single known action type based on either an RTK action creator or a plain action type string"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"builder.addMatcher(matcher, reducer)"),": defines a case reducer that can run in response to any action where the ",(0,i.kt)("inlineCode",{parentName:"li"},"matcher")," function returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"builder.addDefaultCase(reducer)"),": defines a case reducer that will run if no other case reducers were executed for this action.")),(0,i.kt)("p",null,"You can chain these together, like ",(0,i.kt)("inlineCode",{parentName:"p"},"builder.addCase().addCase().addMatcher().addDefaultCase()"),". If multiple matchers match the action, they will run in the order they were defined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { increment } from '../features/counter/counterSlice'\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // slice-specific reducers here\n  },\n  // highlight-start\n  extraReducers: builder => {\n    builder\n      .addCase('counter/decrement', (state, action) => {})\n      .addCase(increment, (state, action) => {})\n  }\n  // highlight-end\n})\n"))),(0,i.kt)("p",null,'In this case, we need to listen for the "pending" and "fulfilled" action types dispatched by our ',(0,i.kt)("inlineCode",{parentName:"p"},"fetchPosts")," thunk. Those action creators are attached to our actual ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchPost")," function, and we can pass those to ",(0,i.kt)("inlineCode",{parentName:"p"},"extraReducers")," to listen for those actions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // omit existing reducers here\n  },\n  // highlight-start\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n  }\n  // highlight-end\n})\n")),(0,i.kt)("p",null,"We'll handle all three action types that could be dispatched by the thunk, based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," we returned:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When the request starts, we'll set the ",(0,i.kt)("inlineCode",{parentName:"li"},"status")," enum to ",(0,i.kt)("inlineCode",{parentName:"li"},"'loading'")),(0,i.kt)("li",{parentName:"ul"},"If the request succeeds, we mark the ",(0,i.kt)("inlineCode",{parentName:"li"},"status")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"'succeeded'"),", and add the fetched posts to ",(0,i.kt)("inlineCode",{parentName:"li"},"state.posts")),(0,i.kt)("li",{parentName:"ul"},"If the request fails, we'll mark the ",(0,i.kt)("inlineCode",{parentName:"li"},"status")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"'failed'"),", and save any error message into the state so we can display it")),(0,i.kt)("h3",{id:"displaying-loading-state"},"Displaying Loading State"),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," component is already checking for any updates to the posts that are stored in Redux, and rerendering itself any time that list changes. So, if we refresh the page, we should see a random set of posts from our fake API show up on screen:"),(0,i.kt)("p",null,"The fake API we're using returns data immediately. However, a real API call will probably take some time to return a response. It's usually a good idea to show some kind of \"loading...\" indicator in the UI so the user knows we're waiting for data."),(0,i.kt)("p",null,"We can update our ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostsList>")," to show a different bit of UI based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"state.posts.status")," enum: a spinner if we're loading, an error message if it failed, or the actual posts list if we have the data. While we're at it, this is probably a good time to extract a ",(0,i.kt)("inlineCode",{parentName:"p"},"<PostExcerpt>")," component to encapsulate the rendering for one item in the list as well."),(0,i.kt)("p",null,"The result might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="features/posts/PostsList.js"',title:'"features/posts/PostsList.js"'},"// highlight-next-line\nimport { Spinner } from '../../components/Spinner'\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectAllPosts, fetchPosts } from './postsSlice'\n\n// highlight-start\nconst PostExcerpt = ({ post }) => {\n  return (\n    <article className=\"post-excerpt\">\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\n// highlight-end\n\nexport const PostsList = () => {\n  const dispatch = useDispatch()\n  const posts = useSelector(selectAllPosts)\n\n  const postStatus = useSelector(state => state.posts.status)\n  // highlight-next-line\n  const error = useSelector(state => state.posts.error)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  // highlight-start\n  let content\n\n  if (postStatus === 'loading') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    // Sort posts in reverse chronological order by datetime string\n    const orderedPosts = posts\n      .slice()\n      .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPosts.map(post => (\n      <PostExcerpt key={post.id} post={post} />\n    ))\n  } else if (postStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n  // highlight-end\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n")),(0,i.kt)("p",null,"You might notice that the API calls are taking a while to complete, and that the loading spinner is staying on screen for a couple seconds. Our mock API server is configured to add a 2-second delay to all responses, specifically to help visualize times when there's a loading spinner visible. If you want to change this behavior, you can open up ",(0,i.kt)("inlineCode",{parentName:"p"},"api/server.js"),", and alter this line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="api/server.js"',title:'"api/server.js"'},"// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n")),(0,i.kt)("p",null,"Feel free to turn that on and off as we go if you want the API calls to complete faster."),(0,i.kt)("h2",{id:"loading-users"},"Loading Users"),(0,i.kt)("p",null,"We're now fetching and displaying our list of posts. But, if we look at the posts, there's a problem: they all now say \"Unknown author\" as the authors:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Unknown post authors",src:n(6654).Z,width:"759",height:"249"})),(0,i.kt)("p",null,"This is because the post entries are being randomly generated by the fake API server, which also randomly generates a set of fake users every time we reload the page. We need to update our users slice to fetch those users when the application starts."),(0,i.kt)("p",null,"Like last time, we'll create another async thunk to get the users from the API and return them, then handle the ",(0,i.kt)("inlineCode",{parentName:"p"},"fulfilled")," action in the ",(0,i.kt)("inlineCode",{parentName:"p"},"extraReducers")," slice field. We'll skip worrying about loading state for now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/users/usersSlice.js"',title:'"features/users/usersSlice.js"'},"// highlight-start\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n// highlight-end\n\nconst initialState = []\n\n// highlight-start\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.data\n})\n// highlight-end\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  // highlight-start\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      return action.payload\n    })\n  }\n  // highlight-end\n})\n\nexport default usersSlice.reducer\n")),(0,i.kt)("p",null,"You may have noticed that this time the case reducer isn't using the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," variable at all. Instead, we're returning the ",(0,i.kt)("inlineCode",{parentName:"p"},"action.payload")," directly. Immer lets us update state in two ways: either ",(0,i.kt)("em",{parentName:"p"},"mutating")," the existing state value, or ",(0,i.kt)("em",{parentName:"p"},"returning")," a new result. If we return a new value, that will replace the existing state completely with whatever we return. (Note that if you want to manually return a new value, it's up to you to write any immutable update logic that might be needed.)"),(0,i.kt)("p",null,"In this case, the initial state was an empty array, and we probably could have done ",(0,i.kt)("inlineCode",{parentName:"p"},"state.push(...action.payload)")," to mutate it. But, in our case we really want to replace the list of users with whatever the server returned, and this avoids any chance of accidentally duplicating the list of users in state."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more about how state updates with Immer work, see the ",(0,i.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/usage/immer-reducers#immer-usage-patterns"},'"Writing Reducers with Immer" guide in the RTK docs'),".")),(0,i.kt)("p",null,"We only need to fetch the list of users once, and we want to do it right when the application starts. We can do that in our ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," file, and directly dispatch the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchUsers")," thunk because we have the ",(0,i.kt)("inlineCode",{parentName:"p"},"store")," right there:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"// omit other imports\n\n// highlight-start\nimport store from './app/store'\nimport { fetchUsers } from './features/users/usersSlice'\n// highlight-end\n\nimport { worker } from './api/server'\n\nasync function main() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  // highlight-next-line\n  store.dispatch(fetchUsers())\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\nmain()\n")),(0,i.kt)("p",null,'Now, each of the posts should be showing a username again, and we should also have that same list of users shown in the "Author" dropdown in our ',(0,i.kt)("inlineCode",{parentName:"p"},"<AddPostForm>"),"."),(0,i.kt)("h2",{id:"adding-new-posts"},"Adding New Posts"),(0,i.kt)("p",null,"We have one more step for this section. When we add a new post from the ",(0,i.kt)("inlineCode",{parentName:"p"},"<AddPostForm>"),", that post is only getting added to the Redux store inside our app. We need to actually make an API call that will create the new post entry in our fake API server instead, so that it's \"saved\". (Since this is a fake API, the new post won't persist if we reload the page, but if we had a real backend server it would be available next time we reload.)"),(0,i.kt)("h3",{id:"sending-data-with-thunks"},"Sending Data with Thunks"),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," to help with sending data, not just fetching it. We'll create a thunk that accepts the values from our ",(0,i.kt)("inlineCode",{parentName:"p"},"<AddPostForm>")," as an argument, and makes an HTTP POST call to the fake API to save the data."),(0,i.kt)("p",null,"In the process, we're going to change how we work with the new post object in our reducers. Currently, our ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," is creating a new post object in the ",(0,i.kt)("inlineCode",{parentName:"p"},"prepare")," callback for ",(0,i.kt)("inlineCode",{parentName:"p"},"postAdded"),", and generating a new unique ID for that post. In most apps that save data to a server, the server will take care of generating unique IDs and filling out any extra fields, and will usually return the completed data in its response. So, we can send a request body like ",(0,i.kt)("inlineCode",{parentName:"p"},"{ title, content, user: userId }")," to the server, and then take the complete post object it sends back and add it to our ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/postsSlice.js"',title:'"features/posts/postsSlice.js"'},"// highlight-start\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  // The payload creator receives the partial `{title, content, user}` object\n  async initialPost => {\n    // We send the initial data to the fake API server\n    const response = await client.post('/fakeApi/posts', initialPost)\n    // The response includes the complete post object, including unique ID\n    return response.data\n  }\n)\n// highlight-end\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // The existing `postAdded` reducer and prepare callback were deleted\n    reactionAdded(state, action) {}, // omit logic\n    postUpdated(state, action) {} // omit logic\n  },\n  extraReducers(builder) {\n    // omit posts loading reducers\n    // highlight-start\n    builder.addCase(addNewPost.fulfilled, (state, action) => {\n      // We can directly add the new post object to our posts array\n      state.posts.push(action.payload)\n    })\n    // highlight-end\n  }\n})\n")),(0,i.kt)("h3",{id:"checking-thunk-results-in-components"},"Checking Thunk Results in Components"),(0,i.kt)("p",null,"Finally, we'll update ",(0,i.kt)("inlineCode",{parentName:"p"},"<AddPostForm>")," to dispatch the ",(0,i.kt)("inlineCode",{parentName:"p"},"addNewPost")," thunk instead of the old ",(0,i.kt)("inlineCode",{parentName:"p"},"postAdded")," action. Since this is another API call to the server, it will take some time and ",(0,i.kt)("em",{parentName:"p"},"could")," fail. The ",(0,i.kt)("inlineCode",{parentName:"p"},"addNewPost()")," thunk will automatically dispatch its ",(0,i.kt)("inlineCode",{parentName:"p"},"pending/fulfilled/rejected")," actions to the Redux store, which we're already handling. We ",(0,i.kt)("em",{parentName:"p"},"could")," track the request status in ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," using a second loading enum if we wanted to, but for this example let's keep the loading state tracking limited to the component."),(0,i.kt)("p",null,"It would be good if we can at least disable the \"Save Post\" button while we're waiting for the request, so the user can't accidentally try to save a post twice. If the request fails, we might also want to show an error message here in the form, or perhaps just log it to the console."),(0,i.kt)("p",null,"We can have our component logic wait for the async thunk to finish, and check the result when it's done:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="features/posts/AddPostForm.js"',title:'"features/posts/AddPostForm.js"'},"import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// highlight-next-line\nimport { addNewPost } from './postsSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n  // highlight-next-line\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\n\n  // omit useSelectors and change handlers\n\n  // highlight-start\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending')\n        await dispatch(addNewPost({ title, content, user: userId })).unwrap()\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      } finally {\n        setAddRequestStatus('idle')\n      }\n    }\n  }\n  // highlight-end\n\n  // omit rendering logic\n}\n")),(0,i.kt)("p",null,"We can add a loading status enum field as a React ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook, similar to how we're tracking loading state in ",(0,i.kt)("inlineCode",{parentName:"p"},"postsSlice")," for fetching posts. In this case, we just want to know if the request is in progress or not."),(0,i.kt)("p",null,"When we call ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch(addNewPost())"),", the async thunk returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch"),". We can ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," that promise here to know when the thunk has finished its request. But, we don't yet know if that request succeeded or failed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncThunk"),' handles any errors internally, so that we don\'t see any messages about "rejected Promises" in our logs. It then returns the final action it dispatched: either the ',(0,i.kt)("inlineCode",{parentName:"p"},"fulfilled")," action if it succeeded, or the ",(0,i.kt)("inlineCode",{parentName:"p"},"rejected")," action if it failed."),(0,i.kt)("p",null,"However, it's common to want to write logic that looks at the success or failure of the actual request that was made. Redux Toolkit adds a ",(0,i.kt)("inlineCode",{parentName:"p"},".unwrap()")," function to the returned ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),", which will return a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," that either has the actual ",(0,i.kt)("inlineCode",{parentName:"p"},"action.payload")," value from a ",(0,i.kt)("inlineCode",{parentName:"p"},"fulfilled")," action, or throws an error if it's the ",(0,i.kt)("inlineCode",{parentName:"p"},"rejected")," action. This lets us handle success and failure in the component using normal ",(0,i.kt)("inlineCode",{parentName:"p"},"try/catch")," logic. So, we'll clear out the input fields to reset the form if the post was successfully created, and log the error to the console if it failed."),(0,i.kt)("p",null,"If you want to see what happens when the ",(0,i.kt)("inlineCode",{parentName:"p"},"addNewPost"),' API call fails, try creating a new post where the "Content" field only has the word "error" (without quotes). The server will see that and send back a failed response, so you should see a message logged to the console.'),(0,i.kt)("h2",{id:"what-youve-learned"},"What You've Learned"),(0,i.kt)("p",null,"Async logic and data fetching are always a complex topic. As you've seen, Redux Toolkit includes some tools to automate the typical Redux data fetching patterns."),(0,i.kt)("p",null,"Here's what our app looks like now that we're fetching data from that fake API:"),(0,i.kt)("iframe",{class:"codesandbox",src:"https://codesandbox.io/embed/github/reduxjs/redux-essentials-example-app/tree/checkpoint-3-postRequests/?codemirror=1&fontsize=14&hidenavigation=1&theme=dark&runonclick=1",title:"redux-essentials-example-app",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),(0,i.kt)("p",null,"As a reminder, here's what we covered in this section:"),(0,i.kt)("admonition",{title:"Summary",type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},'You can write reusable "selector" functions to encapsulate reading values from the Redux state'),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Selectors are functions that get the Redux ",(0,i.kt)("inlineCode",{parentName:"li"},"state")," as an argument, and return some data"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},'Redux uses plugins called "middleware" to enable async logic'),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The standard async middleware is called ",(0,i.kt)("inlineCode",{parentName:"li"},"redux-thunk"),", which is included in Redux Toolkit"),(0,i.kt)("li",{parentName:"ul"},"Thunk functions receive ",(0,i.kt)("inlineCode",{parentName:"li"},"dispatch")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"getState")," as arguments, and can use those as part of async logic"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"You can dispatch additional actions to help track the loading status of an API call"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'The typical pattern is dispatching a "pending" action before the call, then either a "success" containing the data or a "failure" action containing the error'),(0,i.kt)("li",{parentName:"ul"},"Loading state should usually be stored as an enum, like ",(0,i.kt)("inlineCode",{parentName:"li"},"'idle' | 'loading' | 'succeeded' | 'failed'")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Redux Toolkit has a ",(0,i.kt)("inlineCode",{parentName:"strong"},"createAsyncThunk")," API that dispatches these actions for you"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createAsyncThunk"),' accepts a "payload creator" callback that should return a ',(0,i.kt)("inlineCode",{parentName:"li"},"Promise"),", and generates ",(0,i.kt)("inlineCode",{parentName:"li"},"pending/fulfilled/rejected")," action types automatically"),(0,i.kt)("li",{parentName:"ul"},"Generated action creators like ",(0,i.kt)("inlineCode",{parentName:"li"},"fetchPosts")," dispatch those actions based on the ",(0,i.kt)("inlineCode",{parentName:"li"},"Promise")," you return"),(0,i.kt)("li",{parentName:"ul"},"You can listen for these action types in ",(0,i.kt)("inlineCode",{parentName:"li"},"createSlice")," using the ",(0,i.kt)("inlineCode",{parentName:"li"},"extraReducers")," field, and update the state in reducers based on those actions."),(0,i.kt)("li",{parentName:"ul"},"Action creators can be used to automatically fill in the keys of the ",(0,i.kt)("inlineCode",{parentName:"li"},"extraReducers")," object so the slice knows what actions to listen for."),(0,i.kt)("li",{parentName:"ul"},"Thunks can return promises. For ",(0,i.kt)("inlineCode",{parentName:"li"},"createAsyncThunk")," specifically, you can ",(0,i.kt)("inlineCode",{parentName:"li"},"await dispatch(someThunk()).unwrap()")," to handle the request success or failure at the component level."))))),(0,i.kt)("h2",{id:"whats-next"},"What's Next?"),(0,i.kt)("p",null,"We've got one more set of topics to cover the core Redux Toolkit APIs and usage patterns. In ",(0,i.kt)("a",{parentName:"p",href:"/redux/tutorials/essentials/part-6-performance-normalization"},"Part 6: Performance and Normalizing Data"),", we'll look at how Redux usage affects React performance, and some ways we can optimize our application for improved performance."))}k.isMDXComponent=!0},9929:function(e,t,n){t.Z=n.p+"assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif"},9244:function(e,t,n){t.Z=n.p+"assets/images/devtools-posts-fulfilled-99e7e96d6687e5eab5b31649d93c8ccf.png"},9501:function(e,t,n){t.Z=n.p+"assets/images/devtools-posts-pending-8885d18adbd31d8269b31caffe463c93.png"},6654:function(e,t,n){t.Z=n.p+"assets/images/posts-unknownAuthor-7c3181c8579739766461e9dd0556b340.png"}}]);