"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6885],{1347:(e,t,a)=>{a.d(t,{A:()=>s});var n=a(6540),o=a(53);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,s),hidden:a},t)}},4359:(e,t,a)=>{a.d(t,{A:()=>u});var n=a(8168),o=a(6540),i=a(53),s=a(195),r=a(7422),l=a(3175),d=a(5236);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:a,defaultValue:s,values:p,groupId:u,className:h}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=p??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,r.X)(m,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===s?s:s??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==f&&!m.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:N}=(0,l.x)(),[v,x]=(0,o.useState)(f),k=[],{blockElementScrollPositionUntilNextRender:b}=(0,d.a_)();if(null!=u){const e=w[u];null!=e&&e!==v&&m.some((t=>t.value===e))&&x(e)}const T=e=>{const t=e.currentTarget,a=k.indexOf(t),n=m[a].value;n!==v&&(b(t),x(n),null!=u&&N(u,String(n)))},R=e=>{let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const a=k.indexOf(e.currentTarget)+1;t=k[a]??k[0];break}case"ArrowLeft":{const a=k.indexOf(e.currentTarget)-1;t=k[a]??k[k.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,i.A)("tabs-container",c.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},h)},m.map((e=>{let{value:t,label:a,attributes:s}=e;return o.createElement("li",(0,n.A)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>k.push(e),onKeyDown:R,onClick:T},s,{className:(0,i.A)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,o.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function u(e){const t=(0,s.A)();return o.createElement(p,(0,n.A)({key:String(t)},e))}},498:(e,t,a)=>{a.d(t,{Ay:()=>r});var n=a(8168),o=(a(6540),a(5680));a(1347),a(4359);const i={toc:[]},s="wrapper";function r(e){let{components:t,...a}=e;return(0,o.yg)(s,(0,n.A)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"Note that ",(0,o.yg)("strong",{parentName:"p"},'this tutorial intentionally shows older-style Redux logic patterns that require more code than the "modern Redux" patterns with Redux Toolkit we teach as the right approach for building apps with Redux today'),", in order to explain the principles and concepts behind Redux. It's ",(0,o.yg)("em",{parentName:"p"},"not")," meant to be a production-ready project."),(0,o.yg)("p",{parentName:"admonition"},'See these pages to learn how to use "modern Redux" with Redux Toolkit:'),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/tutorials/essentials/part-1-overview-concepts"},(0,o.yg)("strong",{parentName:"a"},'The full "Redux Essentials" tutorial')),', which teaches "how to use Redux, the right way" with Redux Toolkit for real-world apps. ',(0,o.yg)("strong",{parentName:"li"},'We recommend that all Redux learners should read the "Essentials" tutorial!')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/tutorials/fundamentals/part-8-modern-redux"},(0,o.yg)("strong",{parentName:"a"},"Redux Fundamentals, Part 8: Modern Redux with Redux Toolkit")),", which shows how to convert the low-level examples from earlier sections into modern Redux Toolkit equivalents"))))}r.isMDXComponent=!0},9285:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=a(8168),o=(a(6540),a(5680)),i=a(498);const s={id:"part-6-async-logic",title:"Redux Fundamentals, Part 6: Async Logic and Data Fetching",sidebar_label:"Async Logic and Data Fetching",description:"The official Redux Fundamentals tutorial: learn how to use async logic with Redux"},r=void 0,l={unversionedId:"tutorials/fundamentals/part-6-async-logic",id:"tutorials/fundamentals/part-6-async-logic",title:"Redux Fundamentals, Part 6: Async Logic and Data Fetching",description:"The official Redux Fundamentals tutorial: learn how to use async logic with Redux",source:"@site/../docs/tutorials/fundamentals/part-6-async-logic.md",sourceDirName:"tutorials/fundamentals",slug:"/tutorials/fundamentals/part-6-async-logic",permalink:"/tutorials/fundamentals/part-6-async-logic",draft:!1,editUrl:"https://github.com/reduxjs/redux/edit/master/website/../docs/tutorials/fundamentals/part-6-async-logic.md",tags:[],version:"current",lastUpdatedAt:1737618502,formattedLastUpdatedAt:"Jan 23, 2025",frontMatter:{id:"part-6-async-logic",title:"Redux Fundamentals, Part 6: Async Logic and Data Fetching",sidebar_label:"Async Logic and Data Fetching",description:"The official Redux Fundamentals tutorial: learn how to use async logic with Redux"},sidebar:"docs",previous:{title:"UI and React",permalink:"/tutorials/fundamentals/part-5-ui-react"},next:{title:"Standard Redux Patterns",permalink:"/tutorials/fundamentals/part-7-standard-patterns"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example REST API and Client",id:"example-rest-api-and-client",level:3},{value:"Redux Middleware and Side Effects",id:"redux-middleware-and-side-effects",level:2},{value:"Using Middleware to Enable Async Logic",id:"using-middleware-to-enable-async-logic",level:3},{value:"Writing an Async Function Middleware",id:"writing-an-async-function-middleware",level:3},{value:"Redux Async Data Flow",id:"redux-async-data-flow",level:2},{value:"Using the Redux Thunk Middleware",id:"using-the-redux-thunk-middleware",level:2},{value:"Configuring the Store",id:"configuring-the-store",level:3},{value:"Fetching Todos from a Server",id:"fetching-todos-from-a-server",level:3},{value:"Saving Todo Items",id:"saving-todo-items",level:3},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}],p={toc:c},u="wrapper";function h(e){let{components:t,...s}=e;return(0,o.yg)(u,(0,n.A)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("admonition",{title:"What You'll Learn",type:"tip"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"How the Redux data flow works with async data"),(0,o.yg)("li",{parentName:"ul"},"How to use Redux middleware for async logic"),(0,o.yg)("li",{parentName:"ul"},"Patterns for handling async request state"))),(0,o.yg)("admonition",{title:"Prerequisites",type:"info"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"Familiarity with using HTTP requests to fetch and update data from a server"),(0,o.yg)("li",{parentName:"ul"},"Understanding asynchronous logic in JS, including Promises"))),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"In ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/fundamentals/part-5-ui-react"},"Part 5: UI and React"),", we saw how to use the React-Redux library to let our React components interact with a Redux store, including calling ",(0,o.yg)("inlineCode",{parentName:"p"},"useSelector")," to read Redux state, calling ",(0,o.yg)("inlineCode",{parentName:"p"},"useDispatch")," to give us access to the ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," function, and wrapping our app in a ",(0,o.yg)("inlineCode",{parentName:"p"},"<Provider>")," component to give those hooks access to the store."),(0,o.yg)("p",null,"So far, all the data we've worked with has been directly inside of our React+Redux client application. However, most real applications need to work with data from a server, by making HTTP API calls to fetch and save items."),(0,o.yg)("p",null,"In this section, we'll update our todo app to fetch the todos from an API, and add new todos by saving them to the API."),(0,o.yg)(i.Ay,{mdxType:"FundamentalsWarning"}),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"Redux Toolkit includes the ",(0,o.yg)("a",{parentName:"p",href:"https://redux-toolkit.js.org/rtk-query/overview"},(0,o.yg)("strong",{parentName:"a"},"RTK Query data fetching and caching API")),". RTK Query is a purpose built data fetching and caching solution for Redux apps, and ",(0,o.yg)("strong",{parentName:"p"},"can eliminate the need to write ",(0,o.yg)("em",{parentName:"strong"},"any")," thunks or reducers to manage data fetching"),". We specifically teach RTK Query as the default approach for data fetching, and RTK Query is built on the same patterns shown in this page."),(0,o.yg)("p",{parentName:"admonition"},"Learn how to use RTK Query for data fetching in ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/essentials/part-7-rtk-query-basics"},"Redux Essentials, Part 7: RTK Query Basics"),".")),(0,o.yg)("h3",{id:"example-rest-api-and-client"},"Example REST API and Client"),(0,o.yg)("p",null,"To keep the example project isolated but realistic, the initial project setup already included a fake in-memory REST API for our data (configured using ",(0,o.yg)("a",{parentName:"p",href:"https://miragejs.com/"},"the Mirage.js mock API tool"),"). The API uses ",(0,o.yg)("inlineCode",{parentName:"p"},"/fakeApi")," as the base URL for the endpoints, and supports the typical ",(0,o.yg)("inlineCode",{parentName:"p"},"GET/POST/PUT/DELETE")," HTTP methods for ",(0,o.yg)("inlineCode",{parentName:"p"},"/fakeApi/todos"),". It's defined in ",(0,o.yg)("inlineCode",{parentName:"p"},"src/api/server.js"),"."),(0,o.yg)("p",null,"The project also includes a small HTTP API client object that exposes ",(0,o.yg)("inlineCode",{parentName:"p"},"client.get()")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"client.post()")," methods, similar to popular HTTP libraries like ",(0,o.yg)("inlineCode",{parentName:"p"},"axios"),". It's defined in ",(0,o.yg)("inlineCode",{parentName:"p"},"src/api/client.js"),"."),(0,o.yg)("p",null,"We'll use the ",(0,o.yg)("inlineCode",{parentName:"p"},"client")," object to make HTTP calls to our in-memory fake REST API for this section."),(0,o.yg)("h2",{id:"redux-middleware-and-side-effects"},"Redux Middleware and Side Effects"),(0,o.yg)("p",null,"By itself, a Redux store doesn't know anything about async logic. It only knows how to synchronously dispatch actions, update the state by calling the root reducer function, and notify the UI that something has changed. Any asynchronicity has to happen outside the store."),(0,o.yg)("p",null,'Earlier, we said that Redux reducers must never contain "side effects". ',(0,o.yg)("strong",{parentName:"p"},'A "side effect" is any change to state or behavior that can be seen outside of returning a value from a function'),". Some common kinds of side effects are things like:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Logging a value to the console"),(0,o.yg)("li",{parentName:"ul"},"Saving a file"),(0,o.yg)("li",{parentName:"ul"},"Setting an async timer"),(0,o.yg)("li",{parentName:"ul"},"Making an HTTP request"),(0,o.yg)("li",{parentName:"ul"},"Modifying some state that exists outside of a function, or mutating arguments to a function"),(0,o.yg)("li",{parentName:"ul"},"Generating random numbers or unique random IDs (such as ",(0,o.yg)("inlineCode",{parentName:"li"},"Math.random()")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"Date.now()"),")")),(0,o.yg)("p",null,"However, any real app will need to do these kinds of things ",(0,o.yg)("em",{parentName:"p"},"somewhere"),". So, if we can't put side effects in reducers, where ",(0,o.yg)("em",{parentName:"p"},"can")," we put them?"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Redux middleware were designed to enable writing logic that has side effects"),"."),(0,o.yg)("p",null,"As we said ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/fundamentals/part-4-store#middleware-use-cases"},"in Part 4"),", a Redux middleware can do ",(0,o.yg)("em",{parentName:"p"},"anything")," when it sees a dispatched action: log something, modify the action, delay the action, make an async call, and more. Also, since middleware form a pipeline around the real ",(0,o.yg)("inlineCode",{parentName:"p"},"store.dispatch")," function, this also means that we could actually pass something that ",(0,o.yg)("em",{parentName:"p"},"isn't")," a plain action object to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch"),", as long as a middleware intercepts that value and doesn't let it reach the reducers."),(0,o.yg)("p",null,"Middleware also have access to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"getState"),". That means you could write some async logic in a middleware, and still have the ability to interact with the Redux store by dispatching actions."),(0,o.yg)("h3",{id:"using-middleware-to-enable-async-logic"},"Using Middleware to Enable Async Logic"),(0,o.yg)("p",null,"Let's look at a couple examples of how middleware can enable us to write some kind of async logic that interacts with the Redux store."),(0,o.yg)("p",null,"One possibility is writing a middleware that looks for specific action types, and runs async logic when it sees those actions, like these examples:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { client } from '../api/client'\n\nconst delayedActionMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/todoAdded') {\n    setTimeout(() => {\n      // Delay this action by one second\n      next(action)\n    }, 1000)\n    return\n  }\n\n  return next(action)\n}\n\nconst fetchTodosMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/fetchTodos') {\n    // Make an API call to fetch todos from the server\n    client.get('todos').then(todos => {\n      // Dispatch an action with the todos we received\n      storeAPI.dispatch({ type: 'todos/todosLoaded', payload: todos })\n    })\n  }\n\n  return next(action)\n}\n")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"For more details on why and how Redux uses middleware for async logic, see these StackOverflow answers by Redux creator Dan Abramov:"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559"},'"How to dispatch a Redux action with a timeout?"')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://stackoverflow.com/questions/34570758/why-do-we-need-middleware-for-async-flow-in-redux/34599594#34599594"},'"Why do we need middleware for async flow?"')))),(0,o.yg)("h3",{id:"writing-an-async-function-middleware"},"Writing an Async Function Middleware"),(0,o.yg)("p",null,"Both of the middleware in that last section were very specific and only do one thing. It would be nice if we had a way to write ",(0,o.yg)("em",{parentName:"p"},"any")," async logic ahead of time, separate from the middleware itself, and still have access to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"getState")," so that we can interact with the store."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"What if we wrote a middleware that let us pass a ",(0,o.yg)("em",{parentName:"strong"},"function")," to ",(0,o.yg)("inlineCode",{parentName:"strong"},"dispatch"),", instead of an action object"),'? We could have our middleware check to see if the "action" is actually a function instead, and if it\'s a function, call the function right away. That would let us write async logic in separate functions, outside of the middleware definition.'),(0,o.yg)("p",null,"Here's what that middleware might look like:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Example async function middleware"',title:'"Example',async:!0,function:!0,'middleware"':!0},"const asyncFunctionMiddleware = storeAPI => next => action => {\n  // If the \"action\" is actually a function instead...\n  if (typeof action === 'function') {\n    // then call the function and pass `dispatch` and `getState` as arguments\n    return action(storeAPI.dispatch, storeAPI.getState)\n  }\n\n  // Otherwise, it's a normal action - send it onwards\n  return next(action)\n}\n")),(0,o.yg)("p",null,"And then we could use that middleware like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const middlewareEnhancer = applyMiddleware(asyncFunctionMiddleware)\nconst store = createStore(rootReducer, middlewareEnhancer)\n\n// Write a function that has `dispatch` and `getState` as arguments\nconst fetchSomeData = (dispatch, getState) => {\n  // Make an async HTTP request\n  client.get('todos').then(todos => {\n    // Dispatch an action with the todos we received\n    dispatch({ type: 'todos/todosLoaded', payload: todos })\n    // Check the updated store state after dispatching\n    const allTodos = getState().todos\n    console.log('Number of todos after loading: ', allTodos.length)\n  })\n}\n\n// Pass the _function_ we wrote to `dispatch`\nstore.dispatch(fetchSomeData)\n// logs: 'Number of todos after loading: ###'\n")),(0,o.yg)("p",null,"Again, notice that ",(0,o.yg)("strong",{parentName:"p"},'this "async function middleware" let us pass a ',(0,o.yg)("em",{parentName:"strong"},"function")," to ",(0,o.yg)("inlineCode",{parentName:"strong"},"dispatch"),"!")," Inside that function, we were able to write some async logic (an HTTP request), then dispatch a normal action object when the request completed."),(0,o.yg)("h2",{id:"redux-async-data-flow"},"Redux Async Data Flow"),(0,o.yg)("p",null,"So how do middleware and async logic affect the overall data flow of a Redux app?"),(0,o.yg)("p",null,"Just like with a normal action, we first need to handle a user event in the application, such as a click on a button. Then, we call ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch()"),", and pass in ",(0,o.yg)("em",{parentName:"p"},"something"),", whether it be a plain action object, a function, or some other value that a middleware can look for."),(0,o.yg)("p",null,"Once that dispatched value reaches a middleware, it can make an async call, and then dispatch a real action object when the async call completes."),(0,o.yg)("p",null,"Earlier, we saw ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/fundamentals/part-2-concepts-data-flow#redux-application-data-flow"},"a diagram that represents the normal synchronous Redux data flow"),". When we add async logic to a Redux app, we add an extra step where middleware can run logic like HTTP requests, then dispatch actions. That makes the async data flow look like this:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Redux async data flow diagram",src:a(7527).A,width:"1440",height:"1080"})),(0,o.yg)("h2",{id:"using-the-redux-thunk-middleware"},"Using the Redux Thunk Middleware"),(0,o.yg)("p",null,'As it turns out, Redux already has an official version of that "async function middleware", called the ',(0,o.yg)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-thunk"},(0,o.yg)("strong",{parentName:"a"},'Redux "Thunk" middleware')),". The thunk middleware allows us to write functions that get ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"getState")," as arguments. The thunk functions can have any async logic we want inside, and that logic can dispatch actions and read the store state as needed."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Writing async logic as thunk functions allows us to reuse that logic without knowing what Redux store we're using ahead of time"),"."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},'The word "thunk" is a programming term that means ',(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Thunk"},'"a piece of code that does some delayed work"'),". For more details on how to use thunks, see the thunk usage guide page:"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/usage/writing-logic-thunks"},"Using Redux: Writing Logic with Thunks"))),(0,o.yg)("p",{parentName:"admonition"},"as well as these posts:"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://daveceddia.com/what-is-a-thunk/"},"What the heck is a thunk?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://medium.com/fullstack-academy/thunks-in-redux-the-basics-85e538a3fe60"},"Thunks in Redux: the basics")))),(0,o.yg)("h3",{id:"configuring-the-store"},"Configuring the Store"),(0,o.yg)("p",null,"The Redux thunk middleware is available on NPM as a package called ",(0,o.yg)("inlineCode",{parentName:"p"},"redux-thunk"),". We need to install that package to use it in our app:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm install redux-thunk\n")),(0,o.yg)("p",null,"Once it's installed, we can update the Redux store in our todo app to use that middleware:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/store.js"',title:'"src/store.js"'},"import { createStore, applyMiddleware } from 'redux'\n// highlight-next-line\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\n// highlight-next-line\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\n\n// The store now has the ability to accept thunk functions in `dispatch`\nconst store = createStore(rootReducer, composedEnhancer)\nexport default store\n")),(0,o.yg)("h3",{id:"fetching-todos-from-a-server"},"Fetching Todos from a Server"),(0,o.yg)("p",null,"Right now our todo entries can only exist in the client's browser. We need a way to load a list of todos from the server when the app starts up."),(0,o.yg)("p",null,"We'll start by writing a thunk function that makes an HTTP call to our ",(0,o.yg)("inlineCode",{parentName:"p"},"/fakeApi/todos")," endpoint to request an array of todo objects, and then dispatch an action containing that array as the payload. Since this is related to the todos feature in general, we'll write the thunk function in the ",(0,o.yg)("inlineCode",{parentName:"p"},"todosSlice.js")," file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/todos/todosSlice.js"',title:'"src/features/todos/todosSlice.js"'},"import { client } from '../../api/client'\n\nconst initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  // omit reducer logic\n}\n\n// Thunk function\n// highlight-start\nexport async function fetchTodos(dispatch, getState) {\n  const response = await client.get('/fakeApi/todos')\n  dispatch({ type: 'todos/todosLoaded', payload: response.todos })\n}\n// highlight-end\n")),(0,o.yg)("p",null,"We only want to make this API call once, when the application loads for the first time. There's a few places we ",(0,o.yg)("em",{parentName:"p"},"could")," put this:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"In the ",(0,o.yg)("inlineCode",{parentName:"li"},"<App>")," component, in a ",(0,o.yg)("inlineCode",{parentName:"li"},"useEffect")," hook"),(0,o.yg)("li",{parentName:"ul"},"In the ",(0,o.yg)("inlineCode",{parentName:"li"},"<TodoList>")," component, in a ",(0,o.yg)("inlineCode",{parentName:"li"},"useEffect")," hook"),(0,o.yg)("li",{parentName:"ul"},"In the ",(0,o.yg)("inlineCode",{parentName:"li"},"index.js")," file directly, right after we import the store")),(0,o.yg)("p",null,"For now, let's try putting this directly in ",(0,o.yg)("inlineCode",{parentName:"p"},"index.js"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/index.js"',title:'"src/index.js"'},"import React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\n\nimport './api/server'\n\n// highlight-start\nimport store from './store'\nimport { fetchTodos } from './features/todos/todosSlice'\n\nstore.dispatch(fetchTodos)\n// highlight-end\n\nconst root = createRoot(document.getElementById('root'))\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n)\n")),(0,o.yg)("p",null,"If we reload the page, there's no visible change in the UI. However, if we open up the Redux DevTools extension, we should now see that a ",(0,o.yg)("inlineCode",{parentName:"p"},"'todos/todosLoaded'")," action was dispatched, and it should contain some todo objects that were generated by our fake server API:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Devtools - todosLoaded action contents",src:a(8286).A,width:"1640",height:"506"})),(0,o.yg)("p",null,"Notice that even though we've dispatched an action, nothing's happening to change the state. ",(0,o.yg)("strong",{parentName:"p"},"We need to handle this action in our todos reducer to have the state updated.")),(0,o.yg)("p",null,"Let's add a case to the reducer to load this data into the store. Since we're fetching the data from the server, we want to completely replace any existing todos, so we can return the ",(0,o.yg)("inlineCode",{parentName:"p"},"action.payload")," array to make it be the new todos ",(0,o.yg)("inlineCode",{parentName:"p"},"state")," value:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/todos/todosSlice.js"',title:'"src/features/todos/todosSlice.js"'},"import { client } from '../../api/client'\n\nconst initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    // omit other reducer cases\n    // highlight-start\n    case 'todos/todosLoaded': {\n      // Replace the existing state entirely by returning the new value\n      return action.payload\n    }\n    // highlight-end\n    default:\n      return state\n  }\n}\n\nexport async function fetchTodos(dispatch, getState) {\n  const response = await client.get('/fakeApi/todos')\n  dispatch({ type: 'todos/todosLoaded', payload: response.todos })\n}\n")),(0,o.yg)("p",null,"Since dispatching an action immediately updates the store, we can also call ",(0,o.yg)("inlineCode",{parentName:"p"},"getState")," in the thunk to read the updated state value after we dispatch. For example, we could log the number of total todos to the console before and after dispatching the ",(0,o.yg)("inlineCode",{parentName:"p"},"'todos/todosLoaded'")," action:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"export async function fetchTodos(dispatch, getState) {\n  const response = await client.get('/fakeApi/todos')\n\n  // highlight-next-line\n  const stateBefore = getState()\n  console.log('Todos before dispatch: ', stateBefore.todos.length)\n\n  dispatch({ type: 'todos/todosLoaded', payload: response.todos })\n\n  // highlight-next-line\n  const stateAfter = getState()\n  console.log('Todos after dispatch: ', stateAfter.todos.length)\n}\n")),(0,o.yg)("h3",{id:"saving-todo-items"},"Saving Todo Items"),(0,o.yg)("p",null,"We also need to update the server whenever we try to create a new todo item. Instead of dispatching the ",(0,o.yg)("inlineCode",{parentName:"p"},"'todos/todoAdded'")," action right away, we should make an API call to the server with the initial data, wait for the server to send back a copy of the newly saved todo item, and ",(0,o.yg)("em",{parentName:"p"},"then")," dispatch an action with that todo item."),(0,o.yg)("p",null,"However, if we start trying to write this logic as a thunk function, we're going to run into a problem: since we're writing the thunk as a separate function in the ",(0,o.yg)("inlineCode",{parentName:"p"},"todosSlice.js")," file, the code that makes the API call doesn't know what the new todo text is supposed to be:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/todos/todosSlice.js"',title:'"src/features/todos/todosSlice.js"'},"async function saveNewTodo(dispatch, getState) {\n  // \u274c We need to have the text of the new todo, but where is it coming from?\n  // highlight-next-line\n  const initialTodo = { text }\n  const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n  dispatch({ type: 'todos/todoAdded', payload: response.todo })\n}\n")),(0,o.yg)("p",null,"We need a way to write one function that accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"text")," as its parameter, but then creates the actual thunk function so that it can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"text")," value to make the API call. Our outer function should then return the thunk function so that we can pass to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," in our component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/todos/todosSlice.js"',title:'"src/features/todos/todosSlice.js"'},"// Write a synchronous outer function that receives the `text` parameter:\nexport function saveNewTodo(text) {\n  // And then creates and returns the async thunk function:\n  return async function saveNewTodoThunk(dispatch, getState) {\n    // \u2705 Now we can use the text value and send it to the server\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    dispatch({ type: 'todos/todoAdded', payload: response.todo })\n  }\n}\n")),(0,o.yg)("p",null,"Now we can use this in our ",(0,o.yg)("inlineCode",{parentName:"p"},"<Header>")," component:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/header/Header.js"',title:'"src/features/header/Header.js"'},"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\n// highlight-next-line\nimport { saveNewTodo } from '../todos/todosSlice'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  const dispatch = useDispatch()\n\n  const handleChange = e => setText(e.target.value)\n\n  const handleKeyDown = e => {\n    // If the user pressed the Enter key:\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n      // highlight-start\n      // Create the thunk function with the text the user wrote\n      const saveNewTodoThunk = saveNewTodo(trimmedText)\n      // Then dispatch the thunk function itself\n      dispatch(saveNewTodoThunk)\n      // highlight-end\n      setText('')\n    }\n  }\n\n  // omit rendering output\n}\n")),(0,o.yg)("p",null,"Since we know we're going to immediately pass the thunk function to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," in the\ncomponent, we can skip creating the temporary variable. Instead, we can call ",(0,o.yg)("inlineCode",{parentName:"p"},"saveNewTodo(text)"),", and pass the resulting thunk function straight to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/header/Header.js"',title:'"src/features/header/Header.js"'},"const handleKeyDown = e => {\n  // If the user pressed the Enter key:\n  const trimmedText = text.trim()\n  if (e.which === 13 && trimmedText) {\n    // highlight-start\n    // Create the thunk function and immediately dispatch it\n    dispatch(saveNewTodo(trimmedText))\n    // highlight-end\n    setText('')\n  }\n}\n")),(0,o.yg)("p",null,"Now the component doesn't actually know that it's even dispatching a thunk function - the ",(0,o.yg)("inlineCode",{parentName:"p"},"saveNewTodo")," function is encapsulating what's actually happening. The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Header>")," component only knows that it needs to dispatch ",(0,o.yg)("em",{parentName:"p"},"some value")," when the user presses enter."),(0,o.yg)("p",null,"This pattern of writing a function to prepare something that will get passed to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," is called ",(0,o.yg)("strong",{parentName:"p"},'the "action creator" pattern'),", and we'll talk about that more in ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/fundamentals/part-7-standard-patterns"},"the next section"),"."),(0,o.yg)("p",null,"We can now see the updated ",(0,o.yg)("inlineCode",{parentName:"p"},"'todos/todoAdded'")," action being dispatched:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Devtools - async todoAdded action contents",src:a(3894).A,width:"1640",height:"395"})),(0,o.yg)("p",null,"The last thing we need to change here is updating our todos reducer. When we make a POST request to ",(0,o.yg)("inlineCode",{parentName:"p"},"/fakeApi/todos"),", the server will return a completely new todo object (including a new ID value). That means our reducer doesn't have to calculate a new ID, or fill out the other fields - it only needs to create a new ",(0,o.yg)("inlineCode",{parentName:"p"},"state")," array that includes the new todo item:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/todos/todosSlice.js"',title:'"src/features/todos/todosSlice.js"'},"const initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    // highlight-start\n    case 'todos/todoAdded': {\n      // Return a new todos state array with the new todo item at the end\n      return [...state, action.payload]\n    }\n    // highlight-end\n    // omit other cases\n    default:\n      return state\n  }\n}\n")),(0,o.yg)("p",null,"And now adding a new todo will work correctly:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Devtools - async todoAdded state diff",src:a(946).A,width:"1640",height:"274"})),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"Thunk functions can be used for both asynchronous ",(0,o.yg)("em",{parentName:"p"},"and")," synchronous logic. Thunks provide a way to write any reusable logic that needs access to ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"getState"),".")),(0,o.yg)("h2",{id:"what-youve-learned"},"What You've Learned"),(0,o.yg)("p",null,'We\'ve now successfully updated our todo app so that we can fetch a list of todo items and save new todo items, using "thunk" functions to make the HTTP requests to our fake server API.'),(0,o.yg)("p",null,"In the process, we saw how Redux middleware are used to let us make async calls and interact with the store by dispatching actions with after the async calls have completed."),(0,o.yg)("p",null,"Here's what the current app looks like:"),(0,o.yg)("iframe",{class:"codesandbox",src:"https://codesandbox.io/embed/github/reduxjs/redux-fundamentals-example-app/tree/checkpoint-6-asyncThunks/?codemirror=1&fontsize=14&hidenavigation=1&theme=dark&runonclick=1",title:"redux-fundamentals-example-app",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),(0,o.yg)("admonition",{title:"Summary",type:"tip"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Redux middleware were designed to enable writing logic that has side effects"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},'"Side effects" are code that changes state/behavior outside a function, like HTTP requests, modifying function arguments, or generating random values'))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Middleware add an extra step to the standard Redux data flow"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Middleware can intercept other values passed to ",(0,o.yg)("inlineCode",{parentName:"li"},"dispatch")),(0,o.yg)("li",{parentName:"ul"},"Middleware have access to ",(0,o.yg)("inlineCode",{parentName:"li"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"getState"),", so they can dispatch more actions as part of async logic"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},'The Redux "Thunk" middleware lets us pass functions to ',(0,o.yg)("inlineCode",{parentName:"strong"},"dispatch")),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},'"Thunk" functions let us write async logic ahead of time, without knowing what Redux store is being used'),(0,o.yg)("li",{parentName:"ul"},"A Redux thunk function receives ",(0,o.yg)("inlineCode",{parentName:"li"},"dispatch")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"getState"),' as arguments, and can dispatch actions like "this data was received from an API response"'))))),(0,o.yg)("h2",{id:"whats-next"},"What's Next?"),(0,o.yg)("p",null,"We've now covered all the core pieces of how to use Redux! You've seen how to:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Write reducers that update state based on dispatched actions,"),(0,o.yg)("li",{parentName:"ul"},"Create and configure a Redux store with a reducer, enhancers, and middleware"),(0,o.yg)("li",{parentName:"ul"},"Use middleware to write async logic that dispatches actions")),(0,o.yg)("p",null,"In ",(0,o.yg)("a",{parentName:"p",href:"/tutorials/fundamentals/part-7-standard-patterns"},"Part 7: Standard Redux Patterns"),", we'll look at several code patterns that are typically used by real-world Redux apps to make our code more consistent and scale better as the application grows."))}h.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>g});var n=a(6540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(a),h=o,g=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return a?n.createElement(g,s(s({ref:t},c),{},{components:a})):n.createElement(g,s({ref:t},c))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,s=new Array(i);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:o,s[1]=r;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7527:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif"},3894:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/devtools-async-todoAdded-action-b3eac966d8c8110fc96f4b810c945861.png"},946:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/devtools-async-todoAdded-diff-5f18f236969280dec2dad1a6d4d74b2e.png"},8286:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/devtools-todosLoaded-action-0f8f36d9f37404a85e5cbc20bd30d9e4.png"}}]);