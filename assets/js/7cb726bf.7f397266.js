"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5280],{816:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"api/bindactioncreators","title":"bindActionCreators","description":"API > bindActionCreators: wrapping action creators for dispatching","source":"@site/../docs/api/bindActionCreators.md","sourceDirName":"api","slug":"/api/bindactioncreators","permalink":"/api/bindactioncreators","draft":false,"unlisted":false,"editUrl":"https://github.com/reduxjs/redux/edit/master/website/../docs/api/bindActionCreators.md","tags":[],"version":"current","lastUpdatedAt":1747212223000,"frontMatter":{"id":"bindactioncreators","title":"bindActionCreators","hide_title":true,"description":"API > bindActionCreators: wrapping action creators for dispatching"},"sidebar":"docs","previous":{"title":"applyMiddleware","permalink":"/api/applymiddleware"},"next":{"title":"compose","permalink":"/api/compose"}}');var i=t(4848),r=t(8453);const s={id:"bindactioncreators",title:"bindActionCreators",hide_title:!0,description:"API > bindActionCreators: wrapping action creators for dispatching"},a="bindActionCreators(actionCreators, dispatch)",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"<code>TodoActionCreators.js</code>",id:"todoactioncreatorsjs",level:4},{value:"<code>SomeComponent.js</code>",id:"somecomponentjs",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"bindactioncreatorsactioncreators-dispatch",children:(0,i.jsx)(n.code,{children:"bindActionCreators(actionCreators, dispatch)"})})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["Turns an object whose values are ",(0,i.jsx)(n.a,{href:"/understanding/thinking-in-redux/glossary#action-creator",children:"action creators"}),", into an object with the same keys, but with every action creator wrapped into a ",(0,i.jsx)(n.a,{href:"/api/store#dispatchaction",children:(0,i.jsx)(n.code,{children:"dispatch"})})," call so they may be invoked directly."]}),"\n",(0,i.jsxs)(n.p,{children:["Normally you should just call ",(0,i.jsx)(n.a,{href:"/api/store#dispatchaction",children:(0,i.jsx)(n.code,{children:"dispatch"})})," directly on your ",(0,i.jsx)(n.a,{href:"/api/store",children:(0,i.jsx)(n.code,{children:"Store"})})," instance. If you use Redux with React, ",(0,i.jsx)(n.a,{href:"https://github.com/gaearon/react-redux",children:"react-redux"})," will provide you with the ",(0,i.jsx)(n.a,{href:"/api/store#dispatchaction",children:(0,i.jsx)(n.code,{children:"dispatch"})})," function so you can call it directly, too."]}),"\n",(0,i.jsxs)(n.p,{children:["The only use case for ",(0,i.jsx)(n.code,{children:"bindActionCreators"})," is when you want to pass some action creators down to a component that isn't aware of Redux, and you don't want to pass ",(0,i.jsx)(n.a,{href:"/api/store#dispatchaction",children:(0,i.jsx)(n.code,{children:"dispatch"})})," or the Redux store to it."]}),"\n",(0,i.jsx)(n.p,{children:"For convenience, you can also pass an action creator as the first argument, and get a dispatch wrapped function in return."}),"\n",(0,i.jsx)(n.admonition,{title:"Warning",type:"warning",children:(0,i.jsxs)(n.p,{children:["This was originally intended for use with the legacy React-Redux ",(0,i.jsx)(n.code,{children:"connect"})," method. It still works, but is rarely needed."]})}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"actionCreators"})," (",(0,i.jsx)(n.em,{children:"Function"})," or ",(0,i.jsx)(n.em,{children:"Object"}),"): An ",(0,i.jsx)(n.a,{href:"/understanding/thinking-in-redux/glossary#action-creator",children:"action creator"}),", or an object whose values are action creators."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dispatch"})," (",(0,i.jsx)(n.em,{children:"Function"}),"): A ",(0,i.jsx)(n.a,{href:"/api/store#dispatchaction",children:(0,i.jsx)(n.code,{children:"dispatch"})})," function available on the ",(0,i.jsx)(n.a,{href:"/api/store",children:(0,i.jsx)(n.code,{children:"Store"})})," instance."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"Function"})," or ",(0,i.jsx)(n.em,{children:"Object"}),"): An object mimicking the original object, but with each function immediately dispatching the action returned by the corresponding action creator. If you passed a function as ",(0,i.jsx)(n.code,{children:"actionCreators"}),", the return value will also be a single function."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.h4,{id:"todoactioncreatorsjs",children:(0,i.jsx)(n.code,{children:"TodoActionCreators.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"export function addTodo(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport function removeTodo(id) {\n  return {\n    type: 'REMOVE_TODO',\n    id\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"somecomponentjs",children:(0,i.jsx)(n.code,{children:"SomeComponent.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import React from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as TodoActionCreators from './TodoActionCreators'\nconsole.log(TodoActionCreators)\n// {\n//   addTodo: Function,\n//   removeTodo: Function\n// }\n\nfunction TodoListContainer(props) {\n  // Injected by react-redux:\n  const { dispatch, todos } = props\n\n  // Here's a good use case for bindActionCreators:\n  // You want a child component to be completely unaware of Redux.\n  // We create bound versions of these functions now so we can\n  // pass them down to our child later.\n\n  const boundActionCreators = useMemo(\n    () => bindActionCreators(TodoActionCreators, dispatch),\n    [dispatch]\n  )\n  console.log(boundActionCreators)\n  // {\n  //   addTodo: Function,\n  //   removeTodo: Function\n  // }\n\n  useEffect(() => {\n    // Note: this won't work:\n    // TodoActionCreators.addTodo('Use Redux')\n\n    // You're just calling a function that creates an action.\n    // You must dispatch the action, too!\n\n    // This will work:\n    let action = TodoActionCreators.addTodo('Use Redux')\n    dispatch(action)\n  }, [])\n\n  return <TodoList todos={todos} {...this.boundActionCreators} />\n\n  // An alternative to bindActionCreators is to pass\n  // just the dispatch function down, but then your child component\n  // needs to import action creators and know about them.\n\n  // return <TodoList todos={todos} dispatch={dispatch} />\n}\n\nexport default connect(state => ({ todos: state.todos }))(TodoListContainer)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);